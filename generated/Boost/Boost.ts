// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BoostClaimed extends ethereum.Event {
  get params(): BoostClaimed__Params {
    return new BoostClaimed__Params(this);
  }
}

export class BoostClaimed__Params {
  _event: BoostClaimed;

  constructor(event: BoostClaimed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BoostCreated extends ethereum.Event {
  get params(): BoostCreated__Params {
    return new BoostCreated__Params(this);
  }
}

export class BoostCreated__Params {
  _event: BoostCreated;

  constructor(event: BoostCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get boost(): BoostCreatedBoostStruct {
    return changetype<BoostCreatedBoostStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class BoostCreatedBoostStruct extends ethereum.Tuple {
  get ref(): Bytes {
    return this[0].toBytes();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get balance(): BigInt {
    return this[2].toBigInt();
  }

  get amountPerAccount(): BigInt {
    return this[3].toBigInt();
  }

  get guard(): Address {
    return this[4].toAddress();
  }

  get expires(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): Address {
    return this[6].toAddress();
  }
}

export class BoostDeposited extends ethereum.Event {
  get params(): BoostDeposited__Params {
    return new BoostDeposited__Params(this);
  }
}

export class BoostDeposited__Params {
  _event: BoostDeposited;

  constructor(event: BoostDeposited) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BoostWithdrawn extends ethereum.Event {
  get params(): BoostWithdrawn__Params {
    return new BoostWithdrawn__Params(this);
  }
}

export class BoostWithdrawn__Params {
  _event: BoostWithdrawn;

  constructor(event: BoostWithdrawn) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Boost__boostsResult {
  value0: Bytes;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: Address;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }
}

export class Boost extends ethereum.SmartContract {
  static bind(address: Address): Boost {
    return new Boost("Boost", address);
  }

  boosts(param0: BigInt): Boost__boostsResult {
    let result = super.call(
      "boosts",
      "boosts(uint256):(bytes32,address,uint256,uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Boost__boostsResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toAddress()
    );
  }

  try_boosts(param0: BigInt): ethereum.CallResult<Boost__boostsResult> {
    let result = super.tryCall(
      "boosts",
      "boosts(uint256):(bytes32,address,uint256,uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Boost__boostsResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toAddress()
      )
    );
  }

  claimStructHash(): Bytes {
    let result = super.call(
      "claimStructHash",
      "claimStructHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_claimStructHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimStructHash",
      "claimStructHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimed(param0: Address, param1: BigInt): boolean {
    let result = super.call("claimed", "claimed(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_claimed(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimed", "claimed(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextBoostId(): BigInt {
    let result = super.call("nextBoostId", "nextBoostId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextBoostId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextBoostId", "nextBoostId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimMultiCall extends ethereum.Call {
  get inputs(): ClaimMultiCall__Inputs {
    return new ClaimMultiCall__Inputs(this);
  }

  get outputs(): ClaimMultiCall__Outputs {
    return new ClaimMultiCall__Outputs(this);
  }
}

export class ClaimMultiCall__Inputs {
  _call: ClaimMultiCall;

  constructor(call: ClaimMultiCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ClaimMultiCall__Outputs {
  _call: ClaimMultiCall;

  constructor(call: ClaimMultiCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get ref(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountPerAccount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get guard(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get expires(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
